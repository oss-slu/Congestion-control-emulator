#include <net/sock.h>
#include <linux/tcp.h>

BEGIN
{       printf("Tracing TCP accepts...");
        printf("%-8s %-6s %-14s ", "TIME", "PID", "SCHEME");
        printf("%-39s %-5s %-39s %-5s", "RADDR", "RPORT", "LADDR","LPORT");
        printf("%-5s %-8s %-6s\n","SCWND", "SSTHRESH", "SNDBUF" );
       
}

kprobe:tcp_rcv_established
{
        $sock = (struct sock *) arg0;
        $tcps = (struct tcp_sock *) arg0; // see tcp_sk()
        $inet_family = $sock->__sk_common.skc_family;

        //printf("rcv,0x%llx,%lld,%d,%d,%d,%d\n", arg0, elapsed / 1000,
        //    $tcps->snd_cwnd, $tcps->snd_ssthresh, $sock->sk_sndbuf,
        //    $sock->sk_wmem_queued);
        if ($inet_family == AF_INET) {
                $daddr = ntop($sock->__sk_common.skc_daddr);
                $saddr = ntop($sock->__sk_common.skc_rcv_saddr);
        } else {
                $daddr = ntop(
                        $sock->__sk_common.skc_v6_daddr.in6_u.u6_addr8);
                $saddr = ntop(
                        $sock->__sk_common.skc_v6_rcv_saddr.in6_u.u6_addr8);
	}

        

        $daddr = ntop($sock->__sk_common.skc_daddr);
        $dport = $sock->__sk_common.skc_dport;
        $saddr = ntop($sock->__sk_common.skc_rcv_saddr);
        $sport = $sock->__sk_common.skc_num;

        $scwnd = $tcps->snd_cwnd;
        $ssthresh = $tcps->snd_ssthresh;
        $sndbuf = $sock->sk_sndbuf;


        if((uint64)($sport) == $1){
                time("%H:%M:%S ");
                printf("%-6d %-14s ", pid, comm);
                printf("%-39s %-5d %-39s %5d ", $daddr, $dport, $saddr,$sport);
                printf("%-5d %-8d %-6d\n", $scwnd, $ssthresh, $sndbuf );
        }


}